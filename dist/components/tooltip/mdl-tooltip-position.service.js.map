{"version":3,"file":"mdl-tooltip-position.service.js","sourceRoot":"","sources":["../../../src/lib/components/tooltip/mdl-tooltip-position.service.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,UAAU,EACX,MAAM,eAAe,CAAC;AAEvB;IAAA;IA0CA,CAAC;IAvCQ,6CAAS,GAAhB,UAAiB,WAAmB,EAAE,YAAoB,EAAE,KAAiB,EAAE,QAAgB;QAE7F,IAAI,MAAM,GAAQ,EAAE,CAAC;QACrB,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAC1C,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACzC,IAAI,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QACxC,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAExC,IAAI,QAAQ,IAAI,MAAM,IAAI,QAAQ,IAAI,OAAO,EAAE;YAC7C,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACzB,IAAI,GAAG,GAAG,SAAS,GAAG,CAAC,EAAE;gBACvB,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;gBACjB,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC;aACxB;iBAAM;gBACL,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;gBACxB,MAAM,CAAC,SAAS,GAAG,SAAS,GAAG,IAAI,CAAC;aACrC;SACF;aAAM;YACL,IAAI,IAAI,GAAG,UAAU,GAAG,CAAC,EAAE;gBACzB,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC;gBAClB,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC;aACzB;iBAAM;gBACL,MAAM,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;gBAC1B,MAAM,CAAC,UAAU,GAAG,UAAU,GAAG,IAAI,CAAC;aACvC;SACF;QAED,IAAI,QAAQ,IAAI,KAAK,EAAE;YACrB,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,GAAG,YAAY,GAAG,EAAE,GAAG,IAAI,CAAC;SACnD;aAAM,IAAI,QAAQ,IAAI,OAAO,EAAE;YAC9B,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;SACpD;aAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;YAC7B,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC;SACpD;aAAM;YACL,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC;SACnD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;gBAzCF,UAAU;;IA0CX,gCAAC;CAAA,AA1CD,IA0CC;SAzCY,yBAAyB","sourcesContent":["import {\n  Injectable\n} from '@angular/core';\n\n@Injectable()\nexport class MdlTooltipPositionService {\n\n  public calcStyle(offsetWidth: number, offsetHeight: number, props: ClientRect, position: string): any {\n\n    var result: any = {};\n    var left = props.left + (props.width / 2);\n    var top = props.top + (props.height / 2);\n    var marginLeft = -1 * (offsetWidth / 2);\n    var marginTop = -1 * (offsetHeight / 2);\n\n    if (position == 'left' || position == 'right') {\n      left = (props.width / 2);\n      if (top + marginTop < 0) {\n        result.top = '0';\n        result.marginTop = '0';\n      } else {\n        result.top = top + 'px';\n        result.marginTop = marginTop + 'px';\n      }\n    } else {\n      if (left + marginLeft < 0) {\n        result.left = '0';\n        result.marginLeft = '0';\n      } else {\n        result.left = left + 'px';\n        result.marginLeft = marginLeft + 'px';\n      }\n    }\n\n    if (position == 'top') {\n      result.top = props.top - offsetHeight - 10 + 'px';\n    } else if (position == 'right') {\n      result.left = props.left + props.width + 10 + 'px';\n    } else if (position == 'left') {\n      result.left = props.left - offsetWidth - 10 + 'px';\n    } else {\n      result.top = props.top + props.height + 10 + 'px';\n    }\n\n    return result;\n  }\n}\n"]}