{"version":3,"file":"mdl-dialog-outlet.service.js","sourceRoot":"","sources":["../../../src/lib/components/dialog-outlet/mdl-dialog-outlet.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAEH,UAAU,EACV,cAAc,EACd,wBAAwB,EACxB,YAAY,EACZ,MAAM,EACT,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AACzE,OAAO,EAAE,2BAA2B,EAAE,MAAM,kCAAkC,CAAC;AAC/E,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAGtC;IAQE,gCACU,MAAsB,EACtB,wBAAkD,EAC1D,MAAc;QAHhB,iBAiBC;QAhBS,WAAM,GAAN,MAAM,CAAgB;QACtB,6BAAwB,GAAxB,wBAAwB,CAA0B;QAJrD,yBAAoB,GAAsB,IAAI,YAAY,EAAE,CAAC;QAOlE,IAAI,mBAAmB,GAAG,IAAI,CAAC;QAC/B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAE;YACvC,IAAI;gBACA,mBAAmB,GAAG,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;aACzE;YAAC,OAAO,CAAC,EAAE;gBACR,0EAA0E;gBAC1E,kBAAkB;aACrB;YACD,IAAI,mBAAmB,EAAE;gBACrB,KAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;aAC3E;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,2DAA0B,GAAjC,UAAkC,KAAuB;QACvD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,sBAAW,oDAAgB;aAA3B;YACE,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAChC,CAAC;;;OAAA;IAEO,oDAAmB,GAA3B,UAA4B,KAAuB;QAAnD,iBAUC;QATC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAE/B,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,CAAC;YAClG,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;YACnF,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,SAAS,CAAE;gBAC7C,KAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;YACnC,CAAC,CAAC,CAAA;SACH;IACH,CAAC;IAEM,6CAAY,GAAnB;QACE,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;IAEM,uDAAsB,GAA7B,UAA8B,MAAc;QAC1C,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;;gBArDF,UAAU;;;;gBAVP,cAAc;gBACd,wBAAwB;gBAExB,MAAM;;IA6DV,6BAAC;CAAA,AAtDD,IAsDC;SArDY,sBAAsB","sourcesContent":["import {\n    ViewContainerRef,\n    Injectable,\n    ApplicationRef,\n    ComponentFactoryResolver,\n    EventEmitter,\n    NgZone\n} from '@angular/core';\nimport { MdlDialogOutletComponent } from './mdl-dialog-outlet.component';\nimport { MdlBackdropOverlayComponent } from './mdl-backdrop-overlay.component';\nimport { take } from 'rxjs/operators';\n\n\n@Injectable()\nexport class MdlDialogOutletService {\n\n  private viewContainerRef_: ViewContainerRef;\n  private backdropComponent: MdlBackdropOverlayComponent;\n\n  public backdropClickEmitter: EventEmitter<any> = new EventEmitter();\n\n  constructor(\n    private appRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    ngZone: NgZone) {\n\n    let dialogOutletCompRef = null;\n    ngZone.onStable.pipe(take(1)).subscribe( () => {\n      try {\n          dialogOutletCompRef = this.appRef.bootstrap(MdlDialogOutletComponent);\n      } catch (e) {\n          // the user did not use the dialog.outlet element outside of his root app.\n          // console.log(e);\n      }\n      if (dialogOutletCompRef) {\n          this.setViewContainerRef(dialogOutletCompRef.instance.viewContainerRef);\n      }\n    });\n  }\n\n  public setDefaultViewContainerRef(vCRef: ViewContainerRef) {\n    this.setViewContainerRef(vCRef);\n  }\n\n  public get viewContainerRef(): ViewContainerRef {\n    return this.viewContainerRef_;\n  }\n\n  private setViewContainerRef(value: ViewContainerRef) {\n    this.viewContainerRef_ = value;\n\n    if (this.viewContainerRef_) {\n      let cFactory = this.componentFactoryResolver.resolveComponentFactory(MdlBackdropOverlayComponent);\n      this.backdropComponent = this.viewContainerRef_.createComponent(cFactory).instance;\n      this.backdropComponent.clickEmitter.subscribe( () => {\n        this.backdropClickEmitter.emit();\n      })\n    }\n  }\n\n  public hideBackdrop() {\n    this.backdropComponent.hide();\n  }\n\n  public showBackdropWithZIndex(zIndex: number) {\n    this.backdropComponent.showWithZIndex(zIndex);\n  }\n}\n"]}